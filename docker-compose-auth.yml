version: "3.9"
services:
  es01:
    container_name: "es01"
    image: "docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}"
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    environment:
      - node.name=elasticsearch-01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esData:/usr/share/elasticsearch/data
      - esConfig:/usr/share/elasticsearch/config
      - certs:$CERTS_DIR
    networks:
      - elastic
    restart: unless-stopped
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 15s
      timeout: 5s
      retries: 10

  kibana:
    container_name: "Kibana"
    image: "docker.elastic.co/kibana/kibana:${ELASTIC_STACK_VERSION}"
    depends_on: { "es01": { "condition": "service_healthy" } }
    ports:
      - "${KIBANA_PORT}:5601"           # [docker host port]:[in container port]
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: https://es01:9200
      ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: $KIBANA_SYSTEM_PASS
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY: $CERTS_DIR/kibana/kibana.key
      SERVER_SSL_CERTIFICATE: $CERTS_DIR/kibana/kibana.crt
    volumes:
      - certs:$CERTS_DIR
      - kibanaConfig:/usr/share/kibana/config
    networks:
      - elastic
    restart: unless-stopped
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 15s
      timeout: 5s
      retries: 10

  indexer-server:
    container_name: "Spring-indexer"
    environment:

      elastic_host: es01                # the elastic host ip

      elastic_port: '9200'              # the elastic host port

      kibana_host: kibana               # the kibana host ip

      ssl_connection: 'true'

      kibana_port: '5601'               # the kibana host port

      dashboard_plugin: '${DASHBOARD_PLUGIN}'

      use_base_variant: '${USE_BASE_VARIANT}'

      kibana_base_path: $KIBANA_BASE_PATH  # base path in kibana

      elastic_user: $INDEXER_USERNAME   # the elastic username for indexer

      elastic_pass: $INDEXER_PASSWORD   # the elastic password for indexer

      max_concurrent_harvests: $INDEXER_MAX_CONCURRENT_HARVESTS     # the max number of concurrent working harvests

      log_level: "info"                 # the log level (info or debug)

      cache_duration_in_seconds: 10     # number of second to cache dashboard data

      Xmx: '${JAVA_MAX_MEMORY}'         # maximum size of memory pool for java

      Xms: '${JAVA_INIT_MEMORY}'        # initial size of memory pool for java

    tty: true

    ports:
      - "${INDEXER_PORT}:8080"          # [docker host port]:[in container port]
    volumes:
      - indexerDB:/DB
      - certs:/certs
    networks:
      - elastic
    image: mkrtcave/indexer
    restart: unless-stopped

  nginx:
    container_name: "Nginx"
    image: "nginx:${NGINX_VERSION}"
    depends_on: { "kibana": { "condition": "service_healthy" } }
    ports:
      - "${PUBLIC_KIBANA_PORT}:6601"
    volumes:
      - nginxConfig:/etc/nginx/conf.d/
      - nginxLog:/var/log/nginx
      - certs:/certs
    networks:
      - elastic
    restart: unless-stopped

  graphdb:
    image: ontotext/graphdb:10.6.4
    container_name: graphdb
    ports:
      - "7200:7200"
    volumes:
      - graphdb-data:/opt/graphdb/home
    environment:
      GDB_JAVA_OPTS: >-
        -Xmx3g -Xms2g
  
  graphdb-init:
    image: curlimages/curl
    depends_on:
      - graphdb
    volumes:
      - ./graphdb-init:/graphdb-init
    entrypoint: [ "/bin/sh", "-c" ]
    command: [ "sleep 10 && sh /graphdb-init/create-repo.sh" ]
  
  ontologymetrics:
    container_name: OntologyMetrics
    image: skrisjak/ontometrics
    ports:
      - ${ONTOLOGY_METRICS_PORT}:8080
    restart: on-failure
    environment:
      - THREADPOOL_SIZE=${THREADPOOL_SIZE}
      - GRAPHDB_REPOSITORY=${GRAPHDB_REPOSITORY}
      - ELASTICSEARCH_HOSTNAME=${ELASTICSEARCH_HOSTNAME}
      - ELASTICSEARCH_SCHEME=${ELASTICSEARCH_SCHEME}
      - ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX}
      - ELASTICSEARCH_APIKEY=${ELASTICSEARCH_APIKEY}
      - JAVA_MAX_HEAP_SPACE=${JAVA_MAX_MEMORY}
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3


volumes:
  esData:
    driver: local
  esConfig:
    driver: local
  kibanaConfig:
    driver: local
  indexerDB:
    driver: local
  nginxConfig:
    driver: local
  nginxLog:
    driver: local
  certs:
    driver: local
  graphdb-data:
    driver: local

networks:
  elastic:
#    driver: bridge